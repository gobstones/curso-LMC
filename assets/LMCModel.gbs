//===============================================================
//===============================================================
//==== LMC Model
//===============================================================
//===============================================================
// REQUIRES: GobstonesAmenities
// REQUIRES: GobstonesLists
// REQUIRES: LMCForm
// REQUIRES: LMCMem

//-------------------------------
//type LMCModel is LMCForm(
//      lm       -> Booleano
//    , pc       -> Número
//    , acc      -> Número
//    , neg      -> Booleano
//    , inp      -> Lista de Números
//    , out      -> Lista de Números
//    , mbs      -> Lista de Listas de Números
//    , bounds   -> (Número, Número)
//    , wz       -> Maybe(value -> Número)
//    , iz       -> Maybe(value -> Número)
//    , dz       -> Maybe(value -> Número)
//    , contents -> Número
//}
//-------------------------------

//-------------------------------
// LMC external operations
//-------------------------------
/*@ATTRIBUTE@block_name@empty LMC with mem size_@*/
function emptyLMCWithMemSize_AndWidth_(memSize, memWidth) {
  /* PURPOSE: describes a LMCForm of type LMCModel, with an empty configuration
     PRECONDITIONS:
       * memSize (the number of MailBoxeS) is <= 100
  */
  Assert(memSize <= 100, "Memory too big in emptyLMC -- it must be <= 100")
  let myBounds := (memSize, memWidth)
  return (LMCForm(lm       <- True                  // The Little Man starts active
                , pc       <- 0                     // The Program Counter in 0
                , acc      <- 0                     // The Accumulator also in 0
                , neg      <- False                 // No NEGatives results so far
                , inp      <- []                    // The INPut is initially empty
                , out      <- []                    // The OUTput is initially empty
                , mbs      <- emptyMemOf_(myBounds) // The MailBoxeS all in zero
                , bounds   <- myBounds              // The BOUNDS is the number of available mailboxes
                , wz       <- Nothing               // The Working Zone is not set
                , iz       <- Nothing               // The Instruction Zone is not set
                , dz       <- Nothing               // The Data Zone is not set
                , contents <- 100                   // The base to separate instructions from data
         ))
}

function loadInput_On_(input, lmc) {
  return (LMCForm (lmc | inp <- input))
}

function loadProgram_On_(prog, lmc) {
  let (size, width) := bounds(lmc)
  Assert(length(prog) <= size, "Program too big in loadProgram_On_ -- consider using a bigger memory")
  memWithProg := memOf_With_(bounds(lmc), prog)
  return (LMCForm (lmc | mbs <- memWithProg))
}

function execute_Program(lmc) {
  currentLMC := lmc
  while (not lmc_IsHalted(currentLMC)) {
    currentLMC := execute_ProgramOneStep(currentLMC)
  }
  return (currentLMC)
}

function debug_Program_Steps(lmc, cant) {
  incrementalExec := []
  foreach i in [0..cant] { incrementalExec := incrementalExec ++ [execute_Program_Steps(i,lmc) ] } 
  return (incrementalExec)
}

function execute_Program_Steps(lmc, cant) {
  currentLMC := lmc
  repeat (cant) { currentLMC := execute_ProgramOneStep(currentLMC) }
  return (currentLMC)
}

function execute_ProgramOneStep(lmc) {
  return(executeInstruction_      (
         incrementProgramCounter_(    // If this is done after executing the instruction, the PC is not right
         fetchData_             (
         decodeInstruction_    (
         fetchInstruction_(lmc)))))
        )                  
}

function inspectDebugFor_AtStep_(lmc, steps) {
    ds       := debug_Program_Steps(lmc,steps)
    lmcToSee := elemAt_In_(steps-1,ds)
    lmcToSee := fetchData_             (
         decodeInstruction_    (
         fetchInstruction_(lmcToSee)))
    dataAddr := decodeIndex_For_CalledBy_WhenDecoding_(value(wz(lmcToSee)) mod 100, bounds(lmcToSee), "inspectDebugFor_AtStep_", "WZ")
    return(value(wz(lmcToSee)), value(iz(lmcToSee))
          , dataAddr
          , fetchPos_From_(dataAddr, mbs(lmcToSee))
          , value(dz(lmcToSee))
          , lmcToSee)
}

//-------------------------------
// LMC Basics
//-------------------------------
function resetsInsLMC_(lmc) {
  return (LMCForm (lmc 
            | wz <- Nothing
            , iz <- Nothing
            , dz <- Nothing
         ))
}

function resetsPC_(lmc)    { return (LMCForm (lmc | pc  <- 0))     }
function setNegLMC_(lmc)   { return (LMCForm (lmc | neg <- True))  }
function clearNegLMC_(lmc) { return (LMCForm (lmc | neg <- False)) }
function lmc_IsHalted(lmc) { return(not lm(lmc))                   }

//-------------------------------
// LMC Instructions
//-------------------------------
function haltLMC_(lmc) { return (LMCForm (lmc | lm  <- False)) }

function addLMC_(lmc) {
  /* PURPOSE: describes the lmc after executing a ADD instruction
     PRECONDITIONS: the LMC is not halted and the Data Zone is set
     PARAMETERS: lmc is an LMCModel
  */
  res := acc(lmc) + value(dz(lmc))
  return (LMCForm (lmc 
            | acc <- res mod 100
            , neg <- (res div 100) /= 0
         ))
}

function subLMC_(lmc) {
  /* PURPOSE: describes the lmc after executing a SUB instruction
     PRECONDITIONS: the LMC is not halted and the Data Zone is set
  */
  res := acc(lmc) - value(dz(lmc))
  return (LMCForm (lmc | acc <- res mod 100
                       , neg <- (res div 100) /= 0
        ))
}

function staLMC_(lmc) {
  /* PURPOSE: describes the lmc after executing a STA instruction
     PRECONDITIONS: the LMC is not halted and the Data Zone is set
  */
  pos := decodeIndex_For_CalledBy_WhenDecoding_(value(dz(lmc)), bounds(lmc), "STA", "DZ")
  return (LMCForm (lmc |
            mbs <- setPos_To_InMem_(pos, acc(lmc), mbs(lmc))
         ))
}

function ldaLMC_(lmc) {
  /* PURPOSE: describes the lmc after executing a LDA instruction
     PRECONDITIONS: the LMC is not halted and the Data Zone is set
  */
  pos := decodeIndex_For_CalledBy_WhenDecoding_(value(dz(lmc)), bounds(lmc), "LDA", "DZ")
  return (LMCForm (lmc | 
            acc <- fetchPos_From_(pos, mbs(lmc))
         ))
}

function braLMC_(lmc) {
  /* PURPOSE: describes the lmc after executing a BRA instruction
     PRECONDITIONS: the LMC is not halted and the Data Zone is set
  */
  return (LMCForm (lmc | 
            pc <- value(dz(lmc))
         ))
}

function brzLMC_(lmc) {
  /* PURPOSE: describes the lmc after executing a BRZ instruction
     PRECONDITIONS: the LMC is not halted and the Data Zone is set
  */
  return (LMCForm (lmc | 
            pc <- choose value(dz(lmc)) when (acc(lmc) == 0)
                         pc(lmc) otherwise
         ))
}

function brpLMC_(lmc) {
  /* PURPOSE: describes the lmc after executing a BRP instruction
     PRECONDITIONS: the LMC is not halted and the Data Zone is set
  */
  return (LMCForm (lmc | 
            pc <- choose value(dz(lmc)) when (not neg(lmc))
                         pc(lmc) otherwise
         ))
}

function e_sLMC_(lmc) {
  /* PURPOSE: describes the lmc after executing a E/S instruction
     PRECONDITIONS: the LMC is not halted and the Data Zone is set
  */
  return (choose 
            inputLMC_(lmc)     when (value(dz(lmc)) == 1)
            outputLMC_(lmc)    when (value(dz(lmc)) == 2)
            boom("Bad address in E/S instruction -- it must be either 1 or 2 (that is, insCode 901 o 902)") otherwise
         )
}

function inputLMC_(lmc) {
  /* PURPOSE: describes the lmc after executing a INP instruction
     PRECONDITIONS: the LMC is not halted and the Data Zone is set
     OBSERVATION: if the input is empty, inputs zeroes
  */
  if (esVacía(inp(lmc))) 
   then { let (val, newInp) := (0, inp(lmc)) }
   else { let (val, newInp) := (primero(inp(lmc)), sinElPrimero(inp(lmc))) }
   
  return (LMCForm (lmc | acc <- val, inp <- newInp))             
}

function outputLMC_(lmc) {
  /* PURPOSE: describes the lmc after executing a OUT instruction
     PRECONDITIONS: the LMC is not halted and the Data Zone is set
  */
return (LMCForm (lmc | out <- out(lmc) ++ [ acc(lmc) ]))             
}


//-------------------------------
// LMC inner working
//   (all functions assume as Inv.Rep. an lmc of type LMCModel)
//-------------------------------
function incrementProgramCounter_(lmc) {
  /* PURPOSE: describes the lmc after incrementing the Program Counter
     PRECONDITIONS: the LMC is not halted
  */
  let (size, width) := bounds(lmc)
  return (LMCForm (lmc | 
            pc <- (pc(lmc)+1) mod size
         ))
}

function fetchInstruction_(lmc) {
  /* PURPOSE: describes the lmc after setting the Working Zone according to the MailBox value given by the Program Counter
     PRECONDITIONS: the LMC is not halted
  */
  memPos := decodeIndex_For_CalledBy_WhenDecoding_(pc(lmc), bounds(lmc), "fetchInstruction_", "PC")
  return (LMCForm (lmc | 
            wz <- just(fetchPos_From_(memPos, mbs(lmc)))
         ))
}

function decodeInstruction_(lmc) {
  /* PURPOSE: describes the lmc after setting the Instruction Zone according to the opCode in the Working Zone
     PRECONDITIONS: the LMC is not halted and the Working Zone is set
  */
  insCode := value(wz(lmc)) div 100
  return (LMCForm(lmc | iz <- just(insCode)))
}

function fetchData_(lmc) {
  /* PURPOSE: describes the lmc after setting the Data Zone according to the data source of 
              the instruction in the Instruction Zone and the Working Zone
     PRECONDITIONS: the LMC is not halted and the Instruction Zone and Working Zone are set
  */
  insCode   := value(iz(lmc))
  dataIndex := value(wz(lmc)) mod 100
  dataAddr  := decodeIndex_For_CalledBy_WhenDecoding_(dataIndex, bounds(lmc), "fetchData_", "dataIndex of opCode")
  data      := fetchPos_From_(dataAddr, mbs(lmc))
  return (LMCForm(lmc | 
            dz <- dataAccordingToSourceFor_Between_And_(insCode, dataIndex, data)
         ))
}

function executeInstruction_(lmc) {
  /* PURPOSE: describes the lmc after executing the instruction given by the Instruction Zone
                (includes unsetting WZ, IZ and DZ as the last step)
     PRECONDITIONS: the LMC is not halted and the Instruction Zone and Data Zone are set
  */
  lmc' := matching (value(iz(lmc))) select
            haltLMC_(lmc) on 0
            addLMC_(lmc)  on 1
            subLMC_(lmc)  on 2
            staLMC_(lmc)  on 3
            ldaLMC_(lmc)  on 5
            braLMC_(lmc)  on 6
            brzLMC_(lmc)  on 7
            brpLMC_(lmc)  on 8
            e_sLMC_(lmc)  on 9
            boom("Instruction not recognized in executeInstruction -- review the program loaded") otherwise
  return (resetsInsLMC_(lmc'))
}  

//-------------------------------
// Auxiliaries for inner working
//-------------------------------
function dataAccordingToSourceFor_Between_And_(insCode, dataIdx, data) {
  return (choose just(data)    when (usesMem_(insCode))
                 just(dataIdx) when (usesValue_(insCode))
                 Nothing       otherwise
         )
}

function usesMem_(insCode) {
  /* PURPOSE: indicates if the given instruction uses a MailBox contents
     PRECONDITIONS: none
  */
  return (insCode == 1      // ADD uses MailBox content (to ADD it to the ACC)
       || insCode == 2      // SUB uses MailBox content (to SUBstructing from the ACC)
       || insCode == 5)     // LDA uses MailBox content (to LoaD to the ACC)
}

function usesValue_(insCode) {
  /* PURPOSE: indicates if the given instruction uses the opCode absolute value
     PRECONDITIONS: none
  */
  return (insCode == 3      // STA uses MailBox address  (to STore address value in the ACC)
       || insCode == 6      // BRA uses the opCode value (to set the PC)
       || insCode == 7      // BRZ uses the opCode value (to set the PC)
       || insCode == 8      // BRP uses the opCode value (to set the PC)
       || insCode == 9)
}
