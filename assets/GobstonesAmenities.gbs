//===============================================================
//===============================================================
//==== Gobstones Amenities
//===============================================================
//===============================================================

//-------------------------------
// Maybe functions
//-------------------------------
type Maybe is variant {
  case Nothing {}
  case Just    { field value }
}

function just(val) { return (Just(value <- val)) }
function isJust_(maybeVal) { 
  return (matching (maybeVal) select 
            True  on Just
            False otherwise)
}
function fromJust(maybeVal) {
  return (matching (maybeVal) select 
            value(maybeVal)              on Just
            boom("Nothing has no value") otherwise)
}
function numFromMaybe(maybeNum) {
  return (matching (maybeNum) select
            value(maybeNum) on Just
            0               otherwise)
}
function maybeFromNum(num) {
  return (choose Nothing   when (num==0)
                 just(num) otherwise
         )
}

function bool2num(b) { return (choose 1 when (b) 0 otherwise) }
function num2bool(n) { return (n/=0) }

function fst(par) {
  let (a,b) := par
  return (a)
}

function snd(par) {
  let (a,b) := par
  return (b)
}

function max(a,b) {
  return (choose a when (a>b) 
                 b otherwise)
}

function min(a,b) {
  return (choose a when (a<b) 
                 b otherwise)
}

//-------------------------------
// Basic Gobstones functions
//-------------------------------
procedure Assert_OrFailWith_(cond, msg) { if (not cond) { BOOM(msg) } }

/*@ATTRIBUTE@atomic@*/
procedure Poner__Veces(color,     cantidad) { repeat (cantidad) { Poner(color)     } }
/*@ATTRIBUTE@atomic@*/
procedure Sacar__Veces(color,     cantidad) { repeat (cantidad) { Sacar(color)     } }
/*@ATTRIBUTE@atomic@*/
procedure Mover__Veces(dirección, cantidad) { repeat (cantidad) { Mover(dirección) } }

/*@ATTRIBUTE@atomic@*/
procedure MoverHacia__Veces(dirección, cantidad) {
  if (cantidad >= 0) 
       { Mover__Veces(dirección         , cantidad)          }
  else { Mover__Veces(opuesto(dirección), opuesto(cantidad)) }
}

function nroBolitas_Al_(color, dir) { 
  Mover(dir)
  return (nroBolitas(color))
}

function lengthOfLine_InDir_(color, dir) {
  lenghtSoFar := 0
  while (hayBolitas(color) && puedeMover(dir)) {
     lenghtSoFar := lenghtSoFar + 1
     Mover(dir)
  }
  if (hayBolitas(color)) { lenghtSoFar := lenghtSoFar + 1 }
  return(lenghtSoFar)
}

//-------------------------------
// Gobstones positioning
//-------------------------------
/*@ATTRIBUTE@atomic@*/
procedure IrAlOrigen() { IrAlBorde(Sur) IrAlBorde(Oeste) }
/*@ATTRIBUTE@atomic@*/
procedure PasarASiguienteCelda() {
    if (puedeMover(Este)) { Mover(Este) }
    else { IrAlBorde(Oeste) Mover(Norte) }
}

function coordActual() {
  return(distanciaAlBorde_(Oeste), distanciaAlBorde_(Sur))
}

/*@ATTRIBUTE@atomic@*/
procedure IrACoord_(coord) {
  let (x,y) := coord
  IrAlOrigen()
  Mover__Veces(Este , x)
  Mover__Veces(Norte, y)
}

/*@ATTRIBUTE@atomic@*/
procedure IrACoord_Desde_(coordDestino, coordActual) {
  let (x0,y0) := coordActual
  let (x1,y1) := coordDestino
  MoverHacia__Veces(Este , x1-x0)
  MoverHacia__Veces(Norte, y1-y0)
}

function displace_From_(offset, baseCoord) {
  let (dx,dy) := offset
  let (x ,y ) := baseCoord
  return (x+dx, y+dy)
}

function relativize_WRT_(targetCoord, baseCoord) {
  let (x ,y ) := targetCoord
  let (x0,y0) := baseCoord
  return (x-x0, y-y0)
}

function distanciaAlBorde_(dir) {
  pasosDados := 0
  while (puedeMover(dir)) { 
    pasosDados := pasosDados + 1
    Mover(dir)
  }
  return (pasosDados)
}

//----------------------------------------------------------
// Asserting about exact number of stones in some cells
//----------------------------------------------------------
function laCeldaTieneExactamente_Bolitas_(cant, color) {
  return (nroBolitas(color) == cant)
}  

function hayExactamente_Bolitas_Al_(cant, color, dir) {
  return (puedeMover(dir) && laCeldaAl_TieneExactamente_Bolitas_(dir, cant, color))
}

function laCeldaAl_TieneExactamente_Bolitas_(dir, cant, color) {
  /* PRECONDITION: there is a neighbor cell in the given direction */
  Mover(dir)
  return (laCeldaTieneExactamente_Bolitas_(cant, color))
}  

//----------------------------------------------------------
// Reading and writing of the board
//----------------------------------------------------------
function tableroActualDe_x_(ancho, alto) {
  IrAlOrigen()
  tablero := [ filaActualDeAncho_(ancho) ]
  repeat (alto-1) {
    Mover(Norte)
    tablero := [ filaActualDeAncho_(ancho) ] ++ tablero
    
  }
  return (tablero)
}

procedure PonerTablero_(tablero) {
    VaciarTablero()
    IrAlOrigen()
    Mover__Veces(Norte, length(tablero))
    PonerFila_(primero(tablero))
    foreach fila in (sinElPrimero(tablero)) {
        Mover(Sur)
        PonerFila_(fila)
    }
}

function filaActualDeAncho_(ancho) {
  IrAlBorde(Oeste)
  fila := [ celdaActual() ]
  repeat (ancho-1) {
    Mover(Este)
    fila := fila ++ [ celdaActual() ]
  }
  return (fila)
}

procedure PonerFila_(fila) {
    IrAlBorde(Oeste)
    PonerCelda_(primero(fila))
    foreach celda in (sinElPrimero(fila)) {
        Mover(Este)
        PonerCelda_(celda)
    }
}

function celdaActual() {
   return (nroBolitas(Azul), nroBolitas(Negro)
         , nroBolitas(Rojo), nroBolitas(Verde))
}

/*@ATTRIBUTE@atomic@*/
procedure PonerCelda_(celda) {
    let (azul, negro, rojo, verde) := celda
    Poner__Veces(Azul , azul )
    Poner__Veces(Negro, negro)
    Poner__Veces(Rojo , rojo )
    Poner__Veces(Verde, verde)
}

//----------------------------------------------------------
// Traversing the board
//----------------------------------------------------------
procedure IniciarRecorrido__(dirPpal, dirSec) {
  IrAlBorde(opuesto(dirPpal))
  IrAlBorde(opuesto(dirSec))
}

function  esFinDeRecorrido__(dirPpal, dirSec) {
  return (not puedeMover(dirPpal) && not puedeMover(dirSec))
}

procedure PasarASiguienteCeldaDeRecorrido__(dirPpal, dirSec) {
  /* PRECONDITION: not esFinDeRecorrido__(dirPpal, dirSec) */
  if (puedeMover(dirSec)) { Mover(dirSec)                             }
   else                   { IrAlBorde(opuesto(dirSec)) Mover(dirPpal) }
}

//----------------------------------------------------------
// Finding a cell with some number of stones of 1 color
//----------------------------------------------------------
procedure EncontrarLaCeldaConExactamente_Bolitas_EnRecorrido__(cant,color,dirPpal,dirSec) {
  // Asking for the same color twice is the same as asking once, because (&&) is idempotent
  EncontrarLaCeldaConExactamente_Bolitas_Y_Bolitas_EnRecorrido__(cant,color,cant,color,dirPpal,dirSec)
}

procedure EncontrarPrimeraCeldaConExactamente_Bolitas_EnRecorrido__(cant,color,dirPpal,dirSec) {
  // Asking for the same color twice is the same as asking once, because (&&) is idempotent
  EncontrarPrimeraCeldaConExactamente_Bolitas_Y_Bolitas_EnRecorrido__(cant,color,cant,color,dirPpal,dirSec)
}

procedure EncontrarSiguienteCeldaConExactamente_Bolitas_EnRecorrido__(cant,color,dirPpal,dirSec) {
  /* PURPOSE: positions the head over the next cell with cant stones of color, 
              or at the corner at the board-traversal end (if such cell does not exist) 
  */
  // Asking for the same color twice is the same as asking once, because (&&) is idempotent
  EncontrarSiguienteCeldaConExactamente_Bolitas_Y_Bolitas_EnRecorrido__(cant,color,cant,color,dirPpal,dirSec)
}

//----------------------------------------------------------
// Finding a cell with some number of stones of 2 colors
//----------------------------------------------------------
function hayUnaCeldaConExactamente_Bolitas_Y_Bolitas_EnRecorrido__(cant1,color1,cant2,color2,dirPpal,dirSec) {
  EncontrarPrimeraCeldaConExactamente_Bolitas_Y_Bolitas_EnRecorrido__(cant1,color1,cant2,color2,dirPpal,dirSec)
  return (laCeldaTieneExactamente_Bolitas_(cant1, color1)
       && laCeldaTieneExactamente_Bolitas_(cant2, color2)
         )
}

procedure EncontrarLaCeldaConExactamente_Bolitas_Y_Bolitas_EnRecorrido__(cant1,color1,cant2,color2,dirPpal,dirSec) {
  /* PRECONDITION: the cell with the exact number of stones must exist */
  EncontrarPrimeraCeldaConExactamente_Bolitas_Y_Bolitas_EnRecorrido__(cant1,color1,cant2,color2,dirPpal,dirSec)
  if (not (laCeldaTieneExactamente_Bolitas_(cant1, color1)
        && laCeldaTieneExactamente_Bolitas_(cant2, color2)
          )) 
    { BOOM("The cell does not exist on EncontrarLaCeldaConExactamente_Bolitas_Y_Bolitas_EnRecorrido__ -- precondition established that it must exist") }
}

procedure EncontrarPrimeraCeldaConExactamente_Bolitas_Y_Bolitas_EnRecorrido__(cant1,color1,cant2,color2,dirPpal,dirSec) {
  IniciarRecorrido__(dirPpal, dirSec)
  if (not (laCeldaTieneExactamente_Bolitas_(cant1, color1)
        && laCeldaTieneExactamente_Bolitas_(cant2, color2)
          )) { 
    // Just in case the very first cell is the one we look for
    EncontrarSiguienteCeldaConExactamente_Bolitas_Y_Bolitas_EnRecorrido__(cant1,color1,cant2,color2,dirPpal,dirSec)
  }
}

procedure EncontrarSiguienteCeldaConExactamente_Bolitas_Y_Bolitas_EnRecorrido__(cant1,color1,cant2,color2,dirPpal,dirSec) {
  /* PURPOSE: positions the head over the next cell with cant stones of color, 
              or at the corner at the board-traversal end (if such cell does not exist) 
     OBSERVATION: it skips the initial cell, because it looks for the NEXT  
  */
  if (not esFinDeRecorrido__(dirPpal, dirSec)) { 
    PasarASiguienteCeldaDeRecorrido__(dirPpal, dirSec) // The current cell must not be considered
    while(not (laCeldaTieneExactamente_Bolitas_(cant1, color1)
            && laCeldaTieneExactamente_Bolitas_(cant2, color2)) 
          && not esFinDeRecorrido__(dirPpal, dirSec)) {
      PasarASiguienteCeldaDeRecorrido__(dirPpal, dirSec)
    }
  }
}

//----------------------------------------------------------
// Finding the direction of a neighbor cell with a given number of stones
//----------------------------------------------------------
function direccionesHacia_Bolitas_Vecinas(cant, color) {
  dirsSoFar := []
  foreach dir in [minDir() .. maxDir() ] {
    dirsSoFar := dirsSoFar ++ singleton_Si_(dir, hayExactamente_Bolitas_Al_(cant, color, dir))
  }
  return(dirsSoFar)
}

function singleton_Si_(valor, condición) { 
  return(choose [valor] when (condición)
                []      otherwise) 
}